{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Result","result","expression","className","Rows","onClick","name","e","target","useState","setExpression","setResult","backspace","slice","calculate","exp","console","log","eval","clear","btnValue","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.714386ff.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\n\nconst Result = ({ result, expression }) => {\n  return (\n    <div className=\"calc__result\">\n      <p>{expression}</p>\n      <h2>{result}</h2>\n    </div>\n  );\n}\n\nconst Rows = ({ onClick }) => {\n  return (\n    <div className=\"calc__rows\">\n      <div className=\"row\">\n        <button name=\"AC\" onClick={e => onClick(e.target.name)}>AC</button>\n        <button name=\"delete\" onClick={e => onClick(e.target.name)}>DELETE</button>\n        <button name=\"%\" onClick={e => onClick(e.target.name)}>%</button>\n        <button name=\"/\" onClick={e => onClick(e.target.name)}>/</button>\n      </div>\n      <div className=\"row\">\n        <button name=\"7\" onClick={e => onClick(e.target.name)}>7</button>\n        <button name=\"8\" onClick={e => onClick(e.target.name)}>8</button>\n        <button name=\"9\" onClick={e => onClick(e.target.name)}>9</button>\n        <button name=\"*\" onClick={e => onClick(e.target.name)}>X</button>\n      </div>\n      <div className=\"row\">\n        <button name=\"4\" onClick={e => onClick(e.target.name)}>4</button>\n        <button name=\"5\" onClick={e => onClick(e.target.name)}>5</button>\n        <button name=\"6\" onClick={e => onClick(e.target.name)}>6</button>\n        <button name=\"-\" onClick={e => onClick(e.target.name)}>-</button>\n      </div>\n      <div className=\"row\">\n        <button name=\"1\" onClick={e => onClick(e.target.name)}>1</button>\n        <button name=\"2\" onClick={e => onClick(e.target.name)}>2</button>\n        <button name=\"3\" onClick={e => onClick(e.target.name)}>3</button>\n        <button name=\"+\" onClick={e => onClick(e.target.name)}>+</button>\n      </div>\n      <div className=\"row\">\n        <button name=\"0\" onClick={e => onClick(e.target.name)}>0</button>\n        <button name=\".\" onClick={e => onClick(e.target.name)}>.</button>\n        <button name=\"=\" onClick={e => onClick(e.target.name)}>=</button>\n      </div>\n    </div>\n  );\n}\nexport default () => {\n  const [expression, setExpression] = useState('');\n  const [result, setResult] = useState('');\n\n  const backspace = () => {\n    try {\n      setExpression(expression.slice(0, -1));\n    }\n    catch (e) {\n      setExpression('error');\n    }\n  }\n\n  const calculate = (exp) => {\n    try {\n      console.log(exp);\n      setResult(eval(exp));\n    }\n    catch (e) {\n      setResult('error');\n    }\n  }\n\n  const clear = () => {\n    setExpression(\"\");\n    setResult(\"\");\n  }\n\n  const onClick = (btnValue) => {\n    if (btnValue === 'AC') clear();\n    else if (btnValue === \"=\") calculate(expression);\n    else if (btnValue === 'delete') backspace();\n    else if (btnValue === '%') {\n      setExpression(`(${expression})/100`);\n      calculate(`(${expression})/100`);\n\n    }\n    else {\n      setExpression(`${expression}${btnValue}`);\n    }\n  }\n\n  return (\n    <div className=\"calc\">\n      <Result expression={expression} result={result} />\n      <Rows onClick={onClick} />\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}