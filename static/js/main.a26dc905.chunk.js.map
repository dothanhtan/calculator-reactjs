{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Result","result","expression","className","Rows","onClick","name","e","target","useState","setExpression","setResult","calculate","exp","console","log","eval","clear","handleClick","btnValue","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a26dc905.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.scss';\r\n\r\nconst Result = ({ result, expression }) => {\r\n  return (\r\n    <div className=\"calc__result\">\r\n      <p>{expression}</p>\r\n      <h2>{result}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Rows = ({ onClick }) => {\r\n  return (\r\n    <div className=\"calc__rows\">\r\n      <div className=\"row\">\r\n        <button name=\"AC\" onClick={e => onClick(e.target.name)}>AC</button>\r\n        <button name=\"(\" onClick={e => onClick(e.target.name)}>(</button>\r\n        <button name=\")\" onClick={e => onClick(e.target.name)}>)</button>\r\n        <button name=\"/\" onClick={e => onClick(e.target.name)}>/</button>\r\n      </div>\r\n      <div className=\"row\">\r\n        <button name=\"7\" onClick={e => onClick(e.target.name)}>7</button>\r\n        <button name=\"8\" onClick={e => onClick(e.target.name)}>8</button>\r\n        <button name=\"9\" onClick={e => onClick(e.target.name)}>9</button>\r\n        <button name=\"*\" onClick={e => onClick(e.target.name)}>X</button>\r\n      </div>\r\n      <div className=\"row\">\r\n        <button name=\"4\" onClick={e => onClick(e.target.name)}>4</button>\r\n        <button name=\"5\" onClick={e => onClick(e.target.name)}>5</button>\r\n        <button name=\"6\" onClick={e => onClick(e.target.name)}>6</button>\r\n        <button name=\"-\" onClick={e => onClick(e.target.name)}>-</button>\r\n      </div>\r\n      <div className=\"row\">\r\n        <button name=\"1\" onClick={e => onClick(e.target.name)}>1</button>\r\n        <button name=\"2\" onClick={e => onClick(e.target.name)}>2</button>\r\n        <button name=\"3\" onClick={e => onClick(e.target.name)}>3</button>\r\n        <button name=\"+\" onClick={e => onClick(e.target.name)}>+</button>\r\n      </div>\r\n      <div className=\"row\">\r\n        <button name=\"0\" onClick={e => onClick(e.target.name)}>0</button>\r\n        <button name=\".\" onClick={e => onClick(e.target.name)}>.</button>\r\n        <button name=\"=\" onClick={e => onClick(e.target.name)}>=</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default () => {\r\n  const [expression, setExpression] = useState('');\r\n  const [result, setResult] = useState('');\r\n\r\n  const calculate = (exp) => {\r\n    try {\r\n      console.log(exp);\r\n      setResult(eval(exp));\r\n    }\r\n    catch (e) {\r\n      // setResult('error');\r\n      clear();\r\n    }\r\n  }\r\n\r\n  const clear = () => {\r\n    setExpression(\"\");\r\n    setResult(\"\");\r\n  }\r\n\r\n  const handleClick = (btnValue) => {\r\n    if (btnValue === 'AC') clear();\r\n    else if (btnValue === \"=\") calculate(expression);\r\n    else {\r\n      setExpression(expression + btnValue);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"calc\">\r\n      <Result expression={expression} result={result} />\r\n      <Rows onClick={handleClick} />\r\n    </div>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}